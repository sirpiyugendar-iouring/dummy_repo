#!/bin/bash
#--------------------------------------------------------------------------
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments. The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#--------------------------------------------------------------------------
# To enable this hook, rename this file to "pre-commit".
#--------------------------------------------------------------------------
# This pre-commit hook validates your files for ESLint issues
# If any issues are found, the commit you made will be rejected.
#--------------------------------------------------------------------------

set -e

#cleaning existing lib cache and installing again
rm -f go.sum
go clean --modcache
go mod tidy

current_dir=$(pwd)

if [ -d "test" ]; then
    echo "Testing directory exists."
    cd test || exit
	for dir in */; do
		if [ -d "$dir" ]; then
			cd "$dir"
			go test
			if [ $? -ne 0 ]; then
			echo "some testing has failed, please fix it before commiting"
			exit 1
			fi
		fi
	done
	cd "$current_dir"
fi

if ! golangci-lint >> /dev/null; 
then
    echo "no golang lint binary, please install using"
    echo " curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.50.1"
    exit 1
fi

lint_file='.golint.yml'

echo "Validating code with lint rules..."

golangci-lint run -c $lint_file
lint_exit_code=$?

if [ $lint_exit_code -ne 0 ]
then
  echo "Your code has lint errors. Resolve them before committing the code."
  exit 1
fi

if [[  "$1" != "osv-skip" ]]
then
	if ! osv-scanner -v >> /dev/null; 
	then
		echo "OSV-scanner not installed, please visit below link for more details"
		echo "https://dev.azure.com/iouring/init/_wiki/wikis/init/58/osv"
		exit 1
	fi
	set +e
	osv-scanner -r go.mod
fi

exit 0
